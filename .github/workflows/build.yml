name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Package Build Artifacts
      if: matrix.build_type == 'Release'
      run: |
        # Create zip package of build artifacts
        cd ${{ steps.strings.outputs.build-output-dir }}
        if [ "$RUNNER_OS" == "Windows" ]; then
          7z a -tzip ../cli-file-explorer-${{ matrix.os }}.zip .
        else
          zip -r ../cli-file-explorer-${{ matrix.os }}.zip .
        fi
      shell: bash

    - name: Upload Build Artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: cli-file-explorer-${{ matrix.os }}
        path: cli-file-explorer-${{ matrix.os }}.zip
